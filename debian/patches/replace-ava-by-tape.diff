Description: replace ava by tape and disable incompatible tests
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2021-09-15

--- a/test.js
+++ b/test.js
@@ -1,7 +1,7 @@
 const fs = require('fs');
 const util = require('util');
 const path = require('path');
-const test = require('ava');
+const test = require('tape');
 const getStream = require('get-stream');
 const globby = require('.');
 
@@ -16,7 +16,7 @@
 	'e.tmp'
 ];
 
-test.before(() => {
+const before = () => {
 	if (!fs.existsSync(temporary)) {
 		fs.mkdirSync(temporary);
 	}
@@ -25,121 +25,185 @@
 		fs.writeFileSync(element, '');
 		fs.writeFileSync(path.join(__dirname, temporary, element), '');
 	}
-});
+};
 
-test.after(() => {
+const after = () => {
 	for (const element of fixture) {
 		fs.unlinkSync(element);
 		fs.unlinkSync(path.join(__dirname, temporary, element));
 	}
 
 	fs.rmdirSync(temporary);
-});
+};
 
 test('glob - async', async t => {
+	before();
 	t.deepEqual((await globby('*.tmp')).sort(), ['a.tmp', 'b.tmp', 'c.tmp', 'd.tmp', 'e.tmp']);
+	t.end();
+	after();
 });
 
 test('glob - async - multiple file paths', t => {
+	before();
 	t.deepEqual(globby.sync(['a.tmp', 'b.tmp']), ['a.tmp', 'b.tmp']);
+	t.end();
+	after();
 });
 
 test('glob with multiple patterns - async', async t => {
+	before();
 	t.deepEqual(await globby(['a.tmp', '*.tmp', '!{c,d,e}.tmp']), ['a.tmp', 'b.tmp']);
+	t.end();
+	after();
 });
 
 test('respect patterns order - async', async t => {
+	before();
 	t.deepEqual(await globby(['!*.tmp', 'a.tmp']), ['a.tmp']);
+	t.end();
+	after();
 });
 
 test('respect patterns order - sync', t => {
+	before();
 	t.deepEqual(globby.sync(['!*.tmp', 'a.tmp']), ['a.tmp']);
+	t.end();
+	after();
 });
 
 test('glob - sync', t => {
+	before();
 	t.deepEqual(globby.sync('*.tmp'), ['a.tmp', 'b.tmp', 'c.tmp', 'd.tmp', 'e.tmp']);
 	t.deepEqual(globby.sync(['a.tmp', '*.tmp', '!{c,d,e}.tmp']), ['a.tmp', 'b.tmp']);
 	t.deepEqual(globby.sync(['!*.tmp', 'a.tmp']), ['a.tmp']);
+	t.end();
+	after();
 });
 
 test('glob - sync - multiple file paths', t => {
+	before();
 	t.deepEqual(globby.sync(['a.tmp', 'b.tmp']), ['a.tmp', 'b.tmp']);
+	t.end();
+	after();
 });
 
 test('return [] for all negative patterns - sync', t => {
+	before();
 	t.deepEqual(globby.sync(['!a.tmp', '!b.tmp']), []);
+	t.end();
+	after();
 });
 
 test('return [] for all negative patterns - async', async t => {
+	before();
 	t.deepEqual(await globby(['!a.tmp', '!b.tmp']), []);
+	t.end();
+	after();
 });
 
 test('glob - stream', async t => {
+	before();
 	t.deepEqual((await getStream.array(globby.stream('*.tmp'))).sort(), ['a.tmp', 'b.tmp', 'c.tmp', 'd.tmp', 'e.tmp']);
+	t.end();
+	after();
 });
 
 test('glob - stream async iterator support', async t => {
+	before();
 	const results = [];
 	for await (const path of globby.stream('*.tmp')) {
 		results.push(path);
 	}
 
 	t.deepEqual(results, ['a.tmp', 'b.tmp', 'c.tmp', 'd.tmp', 'e.tmp']);
+	t.end();
+	after();
 });
 
 test('glob - stream - multiple file paths', async t => {
+	before();
 	t.deepEqual(await getStream.array(globby.stream(['a.tmp', 'b.tmp'])), ['a.tmp', 'b.tmp']);
+	t.end();
+	after();
 });
 
 test('glob with multiple patterns - stream', async t => {
+	before();
 	t.deepEqual(await getStream.array(globby.stream(['a.tmp', '*.tmp', '!{c,d,e}.tmp'])), ['a.tmp', 'b.tmp']);
+	t.end();
+	after();
 });
 
 test('respect patterns order - stream', async t => {
+	before();
 	t.deepEqual(await getStream.array(globby.stream(['!*.tmp', 'a.tmp'])), ['a.tmp']);
+	t.end();
+	after();
 });
 
 test('return [] for all negative patterns - stream', async t => {
+	before();
 	t.deepEqual(await getStream.array(globby.stream(['!a.tmp', '!b.tmp'])), []);
+	t.end();
+	after();
 });
 
 test('cwd option', t => {
+	before();
 	process.chdir(temporary);
 	t.deepEqual(globby.sync('*.tmp', {cwd}), ['a.tmp', 'b.tmp', 'c.tmp', 'd.tmp', 'e.tmp']);
 	t.deepEqual(globby.sync(['a.tmp', '*.tmp', '!{c,d,e}.tmp'], {cwd}), ['a.tmp', 'b.tmp']);
 	process.chdir(cwd);
+	t.end();
+	after();
 });
 
 test('don\'t mutate the options object - async', async t => {
+	before();
 	await globby(['*.tmp', '!b.tmp'], Object.freeze({ignore: Object.freeze([])}));
 	t.pass();
+	t.end();
+	after();
 });
 
 test('don\'t mutate the options object - sync', t => {
+	before();
 	globby.sync(['*.tmp', '!b.tmp'], Object.freeze({ignore: Object.freeze([])}));
 	t.pass();
+	t.end();
+	after();
 });
 
 test('don\'t mutate the options object - stream', async t => {
+	before();
 	await getStream.array(globby.stream(['*.tmp', '!b.tmp'], Object.freeze({ignore: Object.freeze([])})));
 	t.pass();
+	t.end();
+	after();
 });
 
 test('expose generateGlobTasks', t => {
+	before();
 	const tasks = globby.generateGlobTasks(['*.tmp', '!b.tmp'], {ignore: ['c.tmp']});
 
 	t.is(tasks.length, 1);
 	t.is(tasks[0].pattern, '*.tmp');
 	t.deepEqual(tasks[0].options.ignore, ['c.tmp', 'b.tmp']);
+	t.end();
+	after();
 });
 
 test('expose hasMagic', t => {
+	before();
 	t.true(globby.hasMagic('**'));
 	t.true(globby.hasMagic(['**', 'path1', 'path2']));
 	t.false(globby.hasMagic(['path1', 'path2']));
+	t.end();
+	after();
 });
 
 test('expandDirectories option', t => {
+	before();
 	t.deepEqual(globby.sync(temporary), ['tmp/a.tmp', 'tmp/b.tmp', 'tmp/c.tmp', 'tmp/d.tmp', 'tmp/e.tmp']);
 	t.deepEqual(globby.sync('**', {cwd: temporary}), ['a.tmp', 'b.tmp', 'c.tmp', 'd.tmp', 'e.tmp']);
 	t.deepEqual(globby.sync(temporary, {expandDirectories: ['a*', 'b*']}), ['tmp/a.tmp', 'tmp/b.tmp']);
@@ -156,20 +220,19 @@
 		},
 		ignore: ['**/b.tmp']
 	}), ['tmp/a.tmp']);
+	t.end();
+	after();
 });
 
 test('expandDirectories:true and onlyFiles:true option', t => {
+	before();
 	t.deepEqual(globby.sync(temporary, {onlyFiles: true}), ['tmp/a.tmp', 'tmp/b.tmp', 'tmp/c.tmp', 'tmp/d.tmp', 'tmp/e.tmp']);
-});
-
-test.failing('expandDirectories:true and onlyFiles:false option', t => {
-	// Node-glob('tmp/**') => ['tmp', 'tmp/a.tmp', 'tmp/b.tmp', 'tmp/c.tmp', 'tmp/d.tmp', 'tmp/e.tmp']
-	// Fast-glob('tmp/**') => ['tmp/a.tmp', 'tmp/b.tmp', 'tmp/c.tmp', 'tmp/d.tmp', 'tmp/e.tmp']
-	// See https://github.com/mrmlnc/fast-glob/issues/47
-	t.deepEqual(globby.sync(temporary, {onlyFiles: false}), ['tmp', 'tmp/a.tmp', 'tmp/b.tmp', 'tmp/c.tmp', 'tmp/d.tmp', 'tmp/e.tmp']);
+	t.end();
+	after();
 });
 
 test('expandDirectories and ignores option', t => {
+	before();
 	t.deepEqual(globby.sync('tmp', {
 		ignore: ['tmp']
 	}), []);
@@ -178,15 +241,8 @@
 		expandDirectories: false,
 		ignore: ['tmp']
 	}), ['tmp/a.tmp', 'tmp/b.tmp', 'tmp/c.tmp', 'tmp/d.tmp', 'tmp/e.tmp']);
-});
-
-test.failing('relative paths and ignores option', t => {
-	process.chdir(temporary);
-	t.deepEqual(globby.sync('../tmp', {
-		cwd: process.cwd(),
-		ignore: ['tmp']
-	}), []);
-	process.chdir(cwd);
+	t.end();
+	after();
 });
 
 // Rejected for being an invalid pattern
@@ -211,111 +267,155 @@
 	const valueString = util.format(value);
 	const message = 'Patterns must be a string or an array of strings';
 
-	test(`rejects the promise for invalid patterns input: ${valueString} - async`, async t => {
-		await t.throwsAsync(globby(value), {instanceOf: TypeError});
-		await t.throwsAsync(globby(value), {message});
-	});
-
 	test(`throws for invalid patterns input: ${valueString} - sync`, t => {
+		before();
 		t.throws(() => {
 			globby.sync(value);
-		}, {instanceOf: TypeError});
+		});
 
 		t.throws(() => {
 			globby.sync(value);
 		}, {message});
+		t.end();
+		after();
 	});
 
 	test(`throws for invalid patterns input: ${valueString} - stream`, t => {
+		before();
 		t.throws(() => {
 			globby.stream(value);
-		}, {instanceOf: TypeError});
+		});
 
 		t.throws(() => {
 			globby.stream(value);
 		}, {message});
+		t.end();
+		after();
 	});
 
 	test(`generateGlobTasks throws for invalid patterns input: ${valueString}`, t => {
+		before();
 		t.throws(() => {
 			globby.generateGlobTasks(value);
-		}, {instanceOf: TypeError});
+		});
 
 		t.throws(() => {
 			globby.generateGlobTasks(value);
 		}, {message});
+		t.end();
+		after();
 	});
 });
 
 test('gitignore option defaults to false - async', async t => {
+	before();
 	const actual = await globby('*', {onlyFiles: false});
 	t.true(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('gitignore option defaults to false - sync', t => {
+	before();
 	const actual = globby.sync('*', {onlyFiles: false});
 	t.true(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('gitignore option defaults to false - stream', async t => {
+	before();
 	const actual = await getStream.array(globby.stream('*', {onlyFiles: false}));
 	t.true(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('respects gitignore option true - async', async t => {
+	before();
 	const actual = await globby('*', {gitignore: true, onlyFiles: false});
 	t.false(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('respects gitignore option true - sync', t => {
+	before();
 	const actual = globby.sync('*', {gitignore: true, onlyFiles: false});
 	t.false(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('respects gitignore option true - stream', async t => {
+	before();
 	const actual = await getStream.array(globby.stream('*', {gitignore: true, onlyFiles: false}));
 	t.false(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('respects gitignore option false - async', async t => {
+	before();
 	const actual = await globby('*', {gitignore: false, onlyFiles: false});
 	t.true(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('respects gitignore option false - sync', t => {
+	before();
 	const actual = globby.sync('*', {gitignore: false, onlyFiles: false});
 	t.true(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('gitignore option with stats option', async t => {
+	before();
 	const result = await globby('*', {gitignore: true, stats: true});
 	const actual = result.map(x => x.path);
 	t.false(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('gitignore option with absolute option', async t => {
+	before();
 	const result = await globby('*', {gitignore: true, absolute: true});
 	t.false(result.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('respects gitignore option false - stream', async t => {
+	before();
 	const actual = await getStream.array(globby.stream('*', {gitignore: false, onlyFiles: false}));
 	t.true(actual.includes('node_modules'));
+	t.end();
+	after();
 });
 
 test('gitingore option and objectMode option - async', async t => {
+	before();
 	const result = await globby('fixtures/gitignore/*', {gitignore: true, objectMode: true});
 	t.is(result.length, 1);
-	t.truthy(result[0].path);
+	t.ok(result[0].path);
+	t.end();
+	after();
 });
 
 test('gitingore option and objectMode option - sync', t => {
+	before();
 	const result = globby.sync('fixtures/gitignore/*', {gitignore: true, objectMode: true});
 	t.is(result.length, 1);
-	t.truthy(result[0].path);
+	t.ok(result[0].path);
+	t.end();
+	after();
 });
 
 test('`{extension: false}` and `expandDirectories.extensions` option', t => {
+	before();
 	t.deepEqual(
 		globby.sync('*', {
 			cwd: temporary,
@@ -335,23 +435,12 @@
 			'e.tmp'
 		]
 	);
-});
-
-test('throws when specifying a file as cwd - async', async t => {
-	const isFile = path.resolve('fixtures/gitignore/bar.js');
-
-	await t.throwsAsync(
-		globby('.', {cwd: isFile}),
-		{message: 'The `cwd` option must be a path to a directory'}
-	);
-
-	await t.throwsAsync(
-		globby('*', {cwd: isFile}),
-		{message: 'The `cwd` option must be a path to a directory'}
-	);
+	t.end();
+	after();
 });
 
 test('throws when specifying a file as cwd - sync', t => {
+	before();
 	const isFile = path.resolve('fixtures/gitignore/bar.js');
 
 	t.throws(() => {
@@ -361,9 +450,12 @@
 	t.throws(() => {
 		globby.sync('*', {cwd: isFile});
 	}, {message: 'The `cwd` option must be a path to a directory'});
+	t.end();
+	after();
 });
 
 test('throws when specifying a file as cwd - stream', t => {
+	before();
 	const isFile = path.resolve('fixtures/gitignore/bar.js');
 
 	t.throws(() => {
@@ -373,14 +465,22 @@
 	t.throws(() => {
 		globby.stream('*', {cwd: isFile});
 	}, {message: 'The `cwd` option must be a path to a directory'});
+	t.end();
+	after();
 });
 
 test('don\'t throw when specifying a non-existing cwd directory - async', async t => {
+	before();
 	const actual = await globby('.', {cwd: '/unknown'});
 	t.is(actual.length, 0);
+	t.end();
+	after();
 });
 
 test('don\'t throw when specifying a non-existing cwd directory - sync', t => {
+	before();
 	const actual = globby.sync('.', {cwd: '/unknown'});
 	t.is(actual.length, 0);
+	t.end();
+	after();
 });
